* Locating Visual Jokes in Homestuck with Rudimentary Computer Vision

** Abstract

I use basic computer vision to identify which panels in popular webcomic /[[https://www.homestuck.com/info-story][Homestuck]]/ are visually similar to each other, in order to find examples of reused art / callbacks to other panels. I scrape the webcomic for it's images and apply a number of image distance metrics in order to find one which works. Writeup may contain light spoilers for the webcomic.

** Introduction

In preparation of a much larger project, I came across the following need: I would like to give examples of visually similar images in [[https://en.wikipedia.org/wiki/Andrew_Hussie][Andrew Hussie]]'s webcomic /[[https://www.homestuck.com/story][Homestuck]]/. Hussie reuses drawings frequently, and often repurposes previously drawn panels to easily produce new ones involving different characters (i.e. both characters looking at their hands, from the same angle, using an identical drawing but with one character's skin drawn a different color). Hussie uses this repurposing as a means of introducing visual jokes to his webcomic, frequently calling back to other panels, and then calling back to the callbacks. I'd love to be able to point to a number of these reused panels, but no crowdsourced fanmade database of visually similar images in Homestuck has been created (darn), and since Homestuck has [[http://readmspa.org/stats/][>8000 panels]] combing through these by hand in O(n^2) to dig them up myself sounds like something I would rather not do. 

However, I really wanted those examples of visually similar panels, so I racked my brain about how I could accomplish this until I briefly remembered taking an intro computer vision course in college. The art in homestuck is pretty simple, so I set out to see what I could do with elementary tools.

** What, Specifically, Do We Want?

As a brief aside, I'll explain what exactly a "win condition" for this project entails. 

Below are two images from two separate panels in homestuck: 2079 and 2338[fn:1]

[[../images/homestuck/2079_2.gif]]

[[../images/homestuck/2338_1.gif]]

These two images are over 250 pages apart and used for entirely different things, yet they're obvious recolors of the same drawing. This sort of keyframe reuse is really common in Homestuck (and [[https://www.youtube.com/watch?v%3DJU21shbaVBo][media]] in general), but Homestuck's themes of recursion/self-reference and also the sheer magnitude of the webcomic allows for these frames to acquire a sort of meaning unto themselves.

This is nicely illuatrated on panel 2488[fn:2]

[[../images/homestuck/2488_1.gif]]

This image is hilarious.

This is a direct callback to the previously reused drawing, despite being an entirely different drawing - the hands are more realistic human hands rather than the stubby hands in the previous two images. The hands are drawn with no border with the ring and little fingers drawn together to give the appearance of four fingers instead of five, just like the older panels. Even the text on those pages is a callback.

#+begin_QUOTE
Look at this mess. All this blood and sunlight is stirring bright feelings within.

-2338
#+END_QUOTE

#+BEGIN_QUOTE
Ugh. This troll paint is making a mess. This was such a bad idea.

-2488
#+END_QUOTE

Homestuck is full of these, and I would like to find as many as possible.

** Assembling the Compendium

Grabbing the non-flash images in /Homestuck/ is straightforward enough. it can be done with relatively few lines of code thanks to our good friends [[http://docs.python-requests.org/en/master/][Requests]] and [[https://www.crummy.com/software/BeautifulSoup/][Beautiful Soup 4]]. The code to grab all the image files in the webcomic can be found below.

#+BEGIN_SRC python
  import requests, bs4
  firstp = 1
  lastp = 10
  #lastp = 8130

  imglist = []

  for x in range(firstp, lastp+1):
      url = "https://www.homestuck.com/story/" + str(x)
      try:
          page = requests.get(url)
          page.raise_for_status()
      except requests.exceptions.RequestException:
          continue                #some numbers are missing from 1-8130, if the link 404s skip it

      soup = bs4.BeautifulSoup(page.text)
      images = soup.find_all('img', class_="mar-x-auto disp-bl")
      
      for count, image in enumerate(images, 1):
          imgurl = image['src']
          if imgurl[0] == '/': imgurl = "https://www.homestuck.com" + imgurl #handle local reference
          response = requests.get(imgurl)
          if response.status_code == 200:
              with open("./screens/img/" + str(x) + "_" + str(count) + "." + imgurl.split(".")[-1], 'wb') as f:
                  f.write(response.content) #format panelnumber_imagecount.format saves all
                
#+END_SRC

This assembles us a corpus of 9,442 images, mostly gifs. This is a pretty decent corpus, as far as datasets for images go, especially considering most images are gifs which contain multiple frames. It's pretty crazy how large this webcomic is, when you have it all in one folder like this. Just the images alone are more than 700MB.

 [[../images/homestuck/dataset.PNG]]

I won't bother with the flashes for now - although they're certainly an important part of the comic and well worth a closer look later there's well over [[https://www.youtube.com/watch?v%3DAEIOQN3YmNc][three hours]] of flashes and extracting every frame of every flash does not sound fun or necessary for this project for now. 

** Establishing a Baseline with Hamming Distance

A really basic thing we can start with is taking the string representation of the images in the dataset and calculating the [[https://en.wikipedia.org/wiki/Hamming_distance][Hamming Distance]] between them. I have a feeling this won't work particularly well, but it will be useful as a metric of comparison between this and other metrics, plus it should be fairly easy to implement.

* Footnotes

[fn:1] https://www.homestuck.com/story/2079
https://www.homestuck.com/story/2338

[fn:2] 
https://www.homestuck.com/story/2488



